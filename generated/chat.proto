syntax = "proto3";

package grpc;

message Empty {}

// I called it Note because message Message sounds complicated
// note is enc_note message field encrypted_data 
message note {
    string src_usr_name = 1;
    string dst_usr_name = 2;
    string msg = 3;
}

message enc_note {
    string auth_key_id = 1;
    string msg_key = 2;
    string encrypted_data = 3;
}

message req_pq {
    string nonce = 1;
}

message res_pq {
    string nonce = 1;
    string server_nonce = 2;
    string pq = 3;
    string pub_key_fingerprint = 4;
}

message req_DH_params {
    string nonce = 1;
    string server_nonce = 2;
    string p = 3;
    string q = 4;
    string public_key_fingerprint = 5;
    string encrypted_data = 6;
}

message res_DH_params {
    string nonce = 1;
    string server_nonce = 2;
    string encrypted_data = 3;
}

message set_DH_params {
    string nonce = 1;
    string server_nonce = 2;
    string encrypted_data = 3;
}

message dh_gen_ans {
    string nonce = 1;
    string server_nonce = 2;
    string new_nonce_hash_type = 3;
}

message msg_client_server {
    string auth_key_id = 1;
    string msg_key = 2;
    string encrypted_data = 3;
}

message msg_e2e {
    string key_fingerprint = 1;
    string msg_key = 2;
    string encrypted_data = 3;
}

message Error {
    string nonce = 1;
    string server_nonce = 2;
    string error_message = 3;
}

// message msqg_c2c {
//     string auth_key_id = 1;
//     string msg_key = 2;
//     string encrypted_data = 3;
// }

service ChatServer {
    // This bi-directional stream makes it possible to send and receive Notes between 2 persons
    rpc ChatStream (Empty) returns (stream enc_note);
    rpc SendNote (enc_note) returns (Empty);
    rpc RequestPQ (req_pq) returns (res_pq); //Возвращает аутентификационную информацию со стороны сервера
    rpc RequestDH (req_DH_params) returns (res_DH_params); // Возвращаем ответ на запрос параметров DH
    rpc SetClientDH (set_DH_params) returns (dh_gen_ans); // Возвращаем ответ на запрос установки параметров DH клиента
    rpc SendMessageToServer (msg_client_server) returns (msg_client_server); // Комуникация между клиентом и сервером
    rpc SendMessageE2E (msg_e2e) returns (Empty); // Коммуникация между клиентами по E2E
}



